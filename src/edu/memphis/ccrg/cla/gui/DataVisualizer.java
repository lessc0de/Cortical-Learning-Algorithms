package edu.memphis.ccrg.cla.gui;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import edu.memphis.ccrg.cla.utils.ClaUtils;


/**
 * Utility to visualize data files at a specified path.
 * @see ClaUtils
 * @author Ryan J. McCall
 */
public class DataVisualizer extends javax.swing.JFrame {

	private static final Logger logger = Logger.getLogger(DataVisualizer.class.getCanonicalName());
	private JFreeChart chart;
	private XYSeriesCollection displayedSeriesCollection;
    private Map<String,XYSeries> displayedFileSeriesMap = new HashMap<String,XYSeries>();
    // Variables declaration - do not modify
    private javax.swing.JLabel averageValueLabel;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JComboBox directoryComboBox;
    private javax.swing.JComboBox displayedSeriesComboBox;
    private javax.swing.JComboBox fileComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton plotAllButton;
    private javax.swing.JButton plotButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration
	
    /**
     * Constructs a new Data visualizer which loads all the files inside all directories inside specified path. 
     * @param inputPath a directory path
     */
    public DataVisualizer(String inputPath) {
    	initChart();
    	initComponents();        
        initComboBox(inputPath);
        setExtendedState(MAXIMIZED_BOTH);//start maximized in both dimensions
    }
    private void initChart(){
    	displayedSeriesCollection = new XYSeriesCollection();
    	String title = "Value vs. Cycle";
    	title = "";
    	String xLabel = "Cycle";
    	String yLabel = "Value";
    	boolean hasLegend = true;
    	boolean hasTooltips = true;
    	boolean hasUrl = false;
    	chart = ChartFactory.createXYLineChart(title, xLabel, yLabel,displayedSeriesCollection,
    									PlotOrientation.VERTICAL, hasLegend, hasTooltips, hasUrl);
    	chart.setBackgroundPaint(new Color(238,233,233));
    	XYPlot plot = (XYPlot) chart.getPlot();
    	plot.setBackgroundPaint(Color.WHITE);
    	plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
    	plot.setRangeGridlinePaint(Color.LIGHT_GRAY);
    	NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
    	domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    }
    private void initComboBox(String inputPath){
    	File topDirectory = new File(inputPath);
    	if(topDirectory.exists()){
    		for(File f:  topDirectory.listFiles()){ //assumes that path's directory contains directories of files 
    			if(f.isDirectory()&& !".svn".equals(f.getName())){
    				directoryComboBox.addItem(f);    				
    			}
    		}
    	}else{
    		logger.log(Level.WARNING, "Cannot open File at path {0}",inputPath);
    	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        mainPanel = new ChartPanel(chart);
        jToolBar1 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        directoryComboBox = new javax.swing.JComboBox();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        plotAllButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        clearAllButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        fileComboBox = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        plotButton = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        displayedSeriesComboBox = new javax.swing.JComboBox();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        averageValueLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        removeButton = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("  Directory  ");
        jToolBar1.add(jLabel3);

        directoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryComboBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(directoryComboBox);
        jToolBar1.add(jSeparator6);

        plotAllButton.setText("Plot All");
        plotAllButton.setFocusable(false);
        plotAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        plotAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        plotAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotAllButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(plotAllButton);
        jToolBar1.add(jSeparator7);

        clearAllButton.setText("  Clear All  ");
        clearAllButton.setFocusable(false);
        clearAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearAllButton);
        jToolBar1.add(jSeparator1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("  File  ");
        jToolBar1.add(jLabel1);
        jToolBar1.add(fileComboBox);
        jToolBar1.add(jSeparator2);

        plotButton.setText("  Plot  ");
        plotButton.setFocusable(false);
        plotButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        plotButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(plotButton);

        jToolBar2.setRollover(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("  Displayed  ");
        jToolBar2.add(jLabel2);

        displayedSeriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayedSeriesComboBoxActionPerformed(evt);
            }
        });
        jToolBar2.add(displayedSeriesComboBox);
        jToolBar2.add(jSeparator5);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Average Value:  ");
        jToolBar2.add(jLabel4);

        averageValueLabel.setText("----");
        jToolBar2.add(averageValueLabel);
        jToolBar2.add(jSeparator3);

        removeButton.setText("   Remove   ");
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(removeButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    
    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {
        File selected = (File) fileComboBox.getSelectedItem();
        plotData(selected);
		refresh();
    } 
    private void plotData(File f){
    	String filePath = f.toString();
        if(!displayedFileSeriesMap.containsKey(filePath)){//avoid adding duplicate series
	        BufferedReader br = null;
	        try {
				br = new BufferedReader(new FileReader(f));
				XYSeries series = new XYSeries(filePath); //create a new series
				int dataPointCounter = 0;
				String inputLine = br.readLine();
				int parseFailures = 0;
				while(inputLine != null) {
					inputLine = inputLine.replaceAll(",","");
					try{
						double d = Double.parseDouble(inputLine);
						series.add(dataPointCounter, d);
					}catch(NumberFormatException e){
						parseFailures++;
					}
					dataPointCounter++; //always advance counter
					inputLine = br.readLine();
				}
				if(parseFailures > 0){
					logger.log(Level.WARNING, "For: {0}, parse failures: {1}",
							new Object[]{filePath,parseFailures});
				}
				displayedSeriesCollection.addSeries(series);
				displayedSeriesComboBox.addItem(filePath);
				displayedFileSeriesMap.put(filePath, series);
			} catch (FileNotFoundException e) {
				logger.log(Level.WARNING, "Cannot find file: {0}",f);
			} catch (IOException e) {
				e.printStackTrace();
			}	        
        }
    }
    
    private void plotAllButtonActionPerformed(java.awt.event.ActionEvent evt) {
        for(int i = 0; i < fileComboBox.getItemCount(); i++){
        	plotData((File) fileComboBox.getItemAt(i));
        }
        refresh();
    }
    private void directoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	File dir = (File) directoryComboBox.getSelectedItem();
    	if(dir != null){
    		fileComboBox.removeAllItems();
	    	for(File f: dir.listFiles()){ 
				if(f.isFile()){
					fileComboBox.addItem(f);
				}
			}
    	}
    }
    
    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	displayedSeriesComboBox.removeAllItems();
    	displayedFileSeriesMap.clear();
    	displayedSeriesCollection.removeAllSeries();
    	refresh();
    }
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String filePath = (String) displayedSeriesComboBox.getSelectedItem();
        if(filePath != null){
	        displayedSeriesComboBox.removeItem(filePath);
	        XYSeries series = displayedFileSeriesMap.remove(filePath);
	        displayedSeriesCollection.removeSeries(series);   
        }
    	refresh();
    }
    private void displayedSeriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	refresh();
    }
    
    public void refresh() {
    	String aveValue = "----";
    	String s = (String) displayedSeriesComboBox.getSelectedItem();
    	if(s != null){
    		XYSeries series = displayedFileSeriesMap.get(s);
    		if(series != null){
				double sum = 0;
    			List<?> items = series.getItems();
    			for(Object o: items){
    				sum += ((XYDataItem)o).getYValue();
    			}
    			aveValue = ""+Math.round(sum/items.size()*1000.0)/1000.0;
    		}
    	}   
    	averageValueLabel.setText(aveValue); 
    	mainPanel.revalidate();
    }
}