package edu.memphis.ccrg.cla.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;

import edu.memphis.ccrg.cla.example.environment.EnvironmentState;
import edu.memphis.ccrg.lida.environment.Environment;
import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.ModuleName;
import edu.memphis.ccrg.lida.framework.gui.panels.GuiPanelImpl;

/**
 *
 * @author Ryan J. McCall
 */
public class InputVisualizer extends GuiPanelImpl {

    private static final Logger logger = Logger.getLogger(CorticalRegionVisualizer.class.getCanonicalName());
    protected static final int CELL_SIZE = 64;
	private static final int DEFAULT_SCALED_WIDTH = 200;
	private static final int DEFAULT_SCALED_HEIGHT = 200;
	private static final float DEFAULT_STROKE_WIDTH = 0.1F;
    private static final double DEFAULT_ZOOM = 1.0;
    protected int scaledWidth = DEFAULT_SCALED_WIDTH;
    protected int scaledHeight = DEFAULT_SCALED_HEIGHT;
    private float strokeWidth = DEFAULT_STROKE_WIDTH;
    protected Stroke stroke;
    protected double zoom = DEFAULT_ZOOM; 
	protected Environment environment;

	protected BufferedImage renderedImage;
	protected Image scaledRenderedImage = renderedImage;	
	// Variables declaration - do not modify
    protected javax.swing.JComboBox aspectComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton refreshButton;
    protected javax.swing.JPanel renderPanel;
    // End of variables declaration

    public InputVisualizer() {
        initComponents();
    }
    
    /**
     * This panel can be initialized with up to three separate parameters:
     * 1. 'strokeWidth' - parsed as a float and is the width of line strokes 
     * used to render the content.
	 * 2. 'zoomFactor' - parsed as a double and is the zoom factor used in the rendering
	 * 3.'renderMode' - a string and represents the type of information this panel will retrieve
	 * from its associated environment to be rendered.
     */
    @Override
    public void initPanel(String[] param){
    	if(param.length > 0){
    		 try{
    			 strokeWidth = Float.parseFloat(param[0]);
             }catch(NumberFormatException e){
             	logger.log(Level.WARNING, "Parse error, using default stroke width",0L);
             }
    	}
    	stroke = new BasicStroke(strokeWidth);
    	if(param.length > 1){
    		try{
   			 	zoom = Double.parseDouble(param[1]);
            }catch(NumberFormatException e){
            	logger.log(Level.WARNING, "Parse error, using default zoom.",0L);
            }
    	}
    	aspectComboBox.addItem(EnvironmentState.inputContent);
    	aspectComboBox.addItem(EnvironmentState.predictionContent);
//    	aspectComboBox.addItem(EnvironmentState.significantPredictionContent);
		
    	FrameworkModule module = agent.getSubmodule(ModuleName.Environment);
    	if (module instanceof Environment) {
    		//init the renderedImages
    		environment = (Environment) module;
    		int width = (Integer)environment.getModuleContent("width");
    		int height = (Integer)environment.getModuleContent("height");
    		renderedImage = new BufferedImage(width*CELL_SIZE, height*CELL_SIZE,
                    BufferedImage.TYPE_INT_RGB);    		
    	}else{
    		logger.log(Level.WARNING,"Error initializing panel; Module does not exist in agent.",
    				0L);
    	}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        renderPanel = new ImagePanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        aspectComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        refreshButton = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText(" Aspect ");
        jToolBar1.add(jLabel1);

        aspectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectComboBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(aspectComboBox);
        jToolBar1.add(jSeparator1);

        refreshButton.setText("Refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        javax.swing.GroupLayout renderPanelLayout = new javax.swing.GroupLayout(renderPanel);
        renderPanel.setLayout(renderPanelLayout);
        renderPanelLayout.setHorizontalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        renderPanelLayout.setVerticalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(renderPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(262, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(renderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(renderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>
    
    private void aspectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	 refresh();
  	}
    
    @Override
	public void refresh() {
    	EnvironmentState renderMode = (EnvironmentState) aspectComboBox.getSelectedItem();
    	Object aspectActivity = environment.getModuleContent(renderMode);
    	if(aspectActivity != null){
    		renderedImage = renderArray((boolean[][]) aspectActivity);
	        if(renderedImage!=null){
	            scaledRenderedImage = renderedImage.getScaledInstance((int)(scaledWidth*zoom), (int)(scaledHeight*zoom), Image.SCALE_SMOOTH);
	        }
	        renderPanel.revalidate();
	        renderPanel.repaint();
    	}
    }
    
    private Color offColor = Color.lightGray;
    private Color onColor = Color.blue;
	
    protected BufferedImage renderArray(boolean[][] array) {
        Graphics2D g = renderedImage.createGraphics();
        g.setColor(offColor);
        g.fillRect(0, 0, array.length*CELL_SIZE, array[0].length*CELL_SIZE);
        g.setColor(onColor);
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[0].length; j++) {
            	if(array[i][j]){
            		g.fillRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE);
//                    g.drawRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE);
            	}
            }
        }
        return renderedImage;
    }
    
    private static final float range = 0.7f; //was 0.7f;
	private static final float offset = 0.1f; //was 0.1f;
	private static final float brightness = 1.0f;
    @SuppressWarnings("unused")
	private BufferedImage renderArray(double[][] array) {
    	 Graphics2D g = renderedImage.createGraphics();
         g.setStroke(stroke);
         for (int i = 0; i < array.length; i++) {
             for (int j = 0; j < array[0].length; j++) {
            	 float val = (float)(array[i][j]*range+offset);
            	 g.setColor(Color.getHSBColor(val,val,brightness));
                 g.fillRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE);
             }
         }
         return renderedImage;
	}
	    
    /*
     * Draws the scaledRenderedImage in the center of the panel.
     */
    private class ImagePanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (scaledRenderedImage != null) { //Draw imaged in central location
                int xCentered = (getWidth() - scaledRenderedImage.getWidth(null)) / 2;
                int yCentered = (getHeight() - scaledRenderedImage.getHeight(null)) / 2;
                g.drawImage(scaledRenderedImage, xCentered, yCentered, null);
            }
        }
    }
}