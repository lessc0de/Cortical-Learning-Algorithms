package edu.memphis.ccrg.cla.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JPanel;

import edu.memphis.ccrg.cla.corticalregion.CorticalRegion;
import edu.memphis.ccrg.cla.corticalregion.CorticalRegionImpl;
import edu.memphis.ccrg.cla.corticalregion.cells.Cell;
import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.gui.panels.GuiPanel;
import edu.memphis.ccrg.lida.framework.gui.panels.GuiPanelImpl;
import edu.memphis.ccrg.lida.framework.tasks.TaskManager;

/**
 * A {@link GuiPanel} to render content from a {@link CorticalRegion}.
 * Renders CorticalRegion content as a {@link BufferedImage} and uses a custom JPanel to draw the render
 * to the panel.
 * @author Ryan J. McCall
 */
public class CorticalRegionVisualizer extends GuiPanelImpl{
	
    public CorticalRegionVisualizer() {
        initComponents();
    }
    
    @Override
    public void initPanel(String[] param){
    	if(param.length > 0){
    		 try{
    			 strokeWidth = Float.parseFloat(param[0]);
             }catch(NumberFormatException e){
             	logger.log(Level.WARNING, "Parse error, using default stroke width",0L);
             }
    	}
    	stroke = new BasicStroke(strokeWidth);
    	if(param.length > 1){
    		try{
   			 	zoom = Double.parseDouble(param[1]);
            }catch(NumberFormatException e){
            	logger.log(Level.WARNING, "Parse error, using default zoom.",0L);
            }
    	}
    	if(param.length > 2){
    		String moduleName = param[2];
    		FrameworkModule module = agent.getSubmodule(moduleName);
        	if (module instanceof CorticalRegionImpl) {
        		region = (CorticalRegionImpl) module;
        		renderedImage = new BufferedImage(region.getRegionWidth()*CELL_SIZE, 
        										  region.getRegionHeight()*CELL_SIZE,
        										  BufferedImage.TYPE_INT_RGB);    		
                int colSize = region.getCellsPerColumn();
                columnPositionComboBox.removeAllItems();
                for(int i = 0; i < colSize; i++){
                	columnPositionComboBox.addItem(i);
                }
        	}else{
        		logger.log(Level.WARNING,"Error initializing panel; Module does not exist in agent.",
        				0L);
        	}
    	}
    	aspectComboBox.removeAllItems();
    	for(CorticalRegionAspect state: CorticalRegionAspect.values()){
    		//Initialize aspectComboBox with the various CorticalRegionStates.
    		aspectComboBox.addItem(state);
    	}	
	}
    
	 /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    protected void initComponents() {
        parameterToolBar = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        aspectComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        columnPositionComboBox = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        refreshButton = new javax.swing.JButton();
        renderPanel = new ImagePanel();

        parameterToolBar.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Aspect");
        parameterToolBar.add(jLabel1);

        aspectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        aspectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspectComboBoxActionPerformed(evt);
            }
        });
        parameterToolBar.add(aspectComboBox);
        parameterToolBar.add(jSeparator1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Column Position");
        parameterToolBar.add(jLabel2);

        columnPositionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        columnPositionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnPositionComboBoxActionPerformed(evt);
            }
        });
        parameterToolBar.add(columnPositionComboBox);
        parameterToolBar.add(jSeparator3);

        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        parameterToolBar.add(refreshButton);

        javax.swing.GroupLayout renderPanelLayout = new javax.swing.GroupLayout(renderPanel);
        renderPanel.setLayout(renderPanelLayout);
        renderPanelLayout.setHorizontalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 539, Short.MAX_VALUE)
        );
        renderPanelLayout.setVerticalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 282, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 539, Short.MAX_VALUE)
            .addComponent(parameterToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
            .addComponent(renderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 313, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parameterToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(renderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>

    private void aspectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void columnPositionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	refresh();
    }
	
    @Override
	public void refresh() {
		CorticalRegionAspect aspect = (CorticalRegionAspect) aspectComboBox.getSelectedItem();		
    	Object aspectActivity = region.getModuleContent(aspect);
    	if(aspectActivity != null){
    		if(aspectActivity instanceof Cell[][][]){
    			Integer colPos = (Integer) columnPositionComboBox.getSelectedItem();
    			renderedImage = render3DCellArray((Cell[][][]) aspectActivity, colPos, aspect);
    			auxRefresh();
    		}else if(aspectActivity instanceof boolean[][]){
    			renderedImage = render2DBooleanArray((boolean[][]) aspectActivity);
    			auxRefresh();
    		}else if(aspectActivity instanceof double[][]){    		
    			renderedImage = renderDoubleArray((double[][]) aspectActivity);
    			auxRefresh();
    		}else{
    			logger.log(Level.WARNING, "Cannot render object {1} of this type.",
    					new Object[]{TaskManager.getCurrentTick(),aspectActivity});
    		}
    	}
    }
	
    /*
     * Renders specified cell state array at specified column position.
     */
    private BufferedImage render3DCellArray(Cell[][][] array, int columnPosition, CorticalRegionAspect aspect) {
        Graphics2D g = renderedImage.createGraphics();
        g.setColor(offColor);
        g.fillRect(0, 0, array.length*CELL_SIZE, array[0].length*CELL_SIZE);
        g.setColor(onColor);
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[0].length; j++) {
            	Cell c = array[i][j][columnPosition];
            	boolean isAspectActive = false;
            	switch(aspect){
            		case ActiveCurrentlyCells:
            			isAspectActive = c.isActiveCurrently();
            			break;
            		case ActivePreviouslyCells:
            			isAspectActive = c.isActivePreviously();
            			break;
            		case PredictedCurrentlyCells:
            			isAspectActive = c.isPredictedCurrently();
            			break;
            		case PredictedPreviouslyCells:
            			isAspectActive = c.isPredictedPreviously();
            			break;
            		case LearningCurrentlyCells:
            			isAspectActive = c.isLearningCurrently();
            			break;
            		case LearningPreviouslyCells:
            			isAspectActive = c.isLearningPreviously();
            			break;
            		case StructurallyPredictedCells:
            			isAspectActive = c.isStructurallyPredicted();
            			break;
            		default:
            			break;
            	}
            	if(isAspectActive){
            		g.fillRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE); //or drawRect
            	}
            }
        }
        return renderedImage;
    }
    
    protected Color offColor = Color.lightGray;
    protected Color onColor = Color.blue;
    
    /*
     * Renders specified cell state array at specified column position.
     */
    private BufferedImage render2DBooleanArray(boolean[][] array) {
        Graphics2D g = renderedImage.createGraphics();
        g.setColor(offColor);
        g.fillRect(0, 0, array.length*CELL_SIZE, array[0].length*CELL_SIZE);
        g.setColor(onColor);
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[0].length; j++) {
            	if(array[i][j]){
            		 g.fillRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE);
            	}
            }
        }
        return renderedImage;
    }

	private static final float range = 0.4f;
	private static final float offset = 0.33f;
	private static final float brightness = 1.0f;
    private BufferedImage renderDoubleArray(double[][] array) {
    	 Graphics2D g = renderedImage.createGraphics();
         g.setStroke(stroke);
         for (int i = 0; i < array.length; i++) {
             for (int j = 0; j < array[0].length; j++) {
            	 float val = (float)(array[i][j]*range+offset);
            	 g.setColor(Color.getHSBColor(val,val,brightness));
                 g.fillRect(i*CELL_SIZE, j*CELL_SIZE, CELL_SIZE, CELL_SIZE);
             }
         }
         return renderedImage;
	}

	protected void auxRefresh(){
    	if(renderedImage!=null){
            scaledRenderedImage = renderedImage.getScaledInstance((int)(scaledWidth*zoom), (int)(scaledHeight*zoom), Image.SCALE_SMOOTH);
        }
        renderPanel.revalidate();
        renderPanel.repaint();
    }
	    
    /*
     * Draws the scaledRenderedImage in the center of the panel.
     */
    private class ImagePanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (scaledRenderedImage != null) { //Draw image in central location
                int xCentered = (getWidth() - scaledRenderedImage.getWidth(null)) / 2;
                int yCentered = (getHeight() - scaledRenderedImage.getHeight(null)) / 2;
                g.drawImage(scaledRenderedImage, xCentered, yCentered, null);
            }
        }
    }
    
    private static final Logger logger = Logger.getLogger(CorticalRegionVisualizer.class.getCanonicalName());
	protected static final int CELL_SIZE = 20;
	private static final int DEFAULT_SCALED_WIDTH = 200;
	private static final int DEFAULT_SCALED_HEIGHT = 200;
	private static final float DEFAULT_STROKE_WIDTH = 0.1F;
    private static final double DEFAULT_ZOOM = 1.0;
	protected int scaledWidth = DEFAULT_SCALED_WIDTH;
    protected int scaledHeight = DEFAULT_SCALED_HEIGHT;
    private float strokeWidth = DEFAULT_STROKE_WIDTH;
    private Stroke stroke;
    private double zoom = DEFAULT_ZOOM; 
	protected CorticalRegionImpl region;
	protected BufferedImage renderedImage;
	protected Image scaledRenderedImage = renderedImage;
	
    // Variables declaration - do not modify
    protected javax.swing.JComboBox aspectComboBox;
    protected javax.swing.JComboBox columnPositionComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar parameterToolBar;
    private javax.swing.JButton refreshButton;
    protected javax.swing.JPanel renderPanel;
    // End of variables declaration

}